/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI.Transportation;

import Model.Account;
import Model.DB4OUtil.DB4OUtil;
import Model.EcoSystem;
import Model.Organization.Organization;
import Model.WorkQueue.Transportation_WorkRequest;
import Model.WorkQueue.Work_Request;
import com.db4o.ObjectContainer;
import com.db4o.ObjectSet;
import java.awt.CardLayout;
import java.util.HashSet;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author goutam
 */
public class TransportationWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form TransportationWorkAreaJPanel
     */
 JPanel upperConatiner;
private Account acc;
private Organization org;
private EcoSystem eco;

    public TransportationWorkAreaJPanel(JPanel upperConatiner,Account acc, Organization org, EcoSystem eco) {
        initComponents();
      this.upperConatiner = upperConatiner;
      this.acc = acc;
     this.org = org;
     this.eco = eco;
   populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonprocessreq = new javax.swing.JButton();
        mainlabel1 = new javax.swing.JLabel();
        jpanelscroll1 = new javax.swing.JScrollPane();
        workreqTble = new javax.swing.JTable();
        buttonRefresh = new javax.swing.JButton();
        buttonback = new javax.swing.JButton();
        buttonAssign = new javax.swing.JButton();
        buttonRefresh1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 51, 51));
        setForeground(new java.awt.Color(204, 204, 204));

        buttonprocessreq.setBackground(new java.awt.Color(204, 204, 204));
        buttonprocessreq.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        buttonprocessreq.setText("Process request");
        buttonprocessreq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonprocessreqActionPerformed(evt);
            }
        });

        mainlabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        mainlabel1.setForeground(new java.awt.Color(153, 255, 255));
        mainlabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/transport_cancer.png"))); // NOI18N
        mainlabel1.setText("TRANSPORTATION WORK AREA");

        workreqTble.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Hospital Name", "Sender", "Status", "Message", "Haste"
            }
        ));
        jpanelscroll1.setViewportView(workreqTble);
        if (workreqTble.getColumnModel().getColumnCount() > 0) {
            workreqTble.getColumnModel().getColumn(0).setHeaderValue("Hospital Name");
        }

        buttonRefresh.setBackground(new java.awt.Color(204, 204, 204));
        buttonRefresh.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        buttonRefresh.setText("Refresh");
        buttonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRefreshActionPerformed(evt);
            }
        });

        buttonback.setBackground(new java.awt.Color(204, 204, 204));
        buttonback.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        buttonback.setText("<< Back");
        buttonback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonbackActionPerformed(evt);
            }
        });

        buttonAssign.setBackground(new java.awt.Color(204, 204, 204));
        buttonAssign.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        buttonAssign.setText("Assign");
        buttonAssign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAssignActionPerformed(evt);
            }
        });

        buttonRefresh1.setBackground(new java.awt.Color(204, 204, 204));
        buttonRefresh1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        buttonRefresh1.setText("Remove");
        buttonRefresh1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRefresh1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(mainlabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(152, 152, 152)
                        .addComponent(buttonback)
                        .addGap(59, 59, 59)
                        .addComponent(buttonAssign, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46)
                        .addComponent(buttonRefresh1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52)
                        .addComponent(buttonprocessreq)
                        .addGap(30, 30, 30)
                        .addComponent(buttonRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jpanelscroll1, javax.swing.GroupLayout.PREFERRED_SIZE, 973, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(156, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(mainlabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(jpanelscroll1, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(72, 72, 72)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonback)
                    .addComponent(buttonAssign)
                    .addComponent(buttonRefresh)
                    .addComponent(buttonprocessreq)
                    .addComponent(buttonRefresh1))
                .addContainerGap(49, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonprocessreqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonprocessreqActionPerformed
        // TODO add your handling code here:
        int selectedRow = workreqTble.getSelectedRow();
    if (selectedRow < 0) {
        JOptionPane.showMessageDialog(null, "Please select a row!");
        return;
    }

    Object rowData = workreqTble.getValueAt(selectedRow, 0);
    if (rowData instanceof Transportation_WorkRequest) {
        Transportation_WorkRequest request = (Transportation_WorkRequest) rowData;
        request.setStatus("Processing");
        CardLayout layout = (CardLayout)upperConatiner.getLayout();
        upperConatiner.add("ProcessRequest", new UI.Transportation.ProcessRequestJPanel(upperConatiner, request));
        layout.next(upperConatiner);
    } else {
        JOptionPane.showMessageDialog(null, "The selected row does not contain a Transportation Work Request.");
    }
   
    }//GEN-LAST:event_buttonprocessreqActionPerformed

    private void buttonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRefreshActionPerformed
        populateTable();
    }//GEN-LAST:event_buttonRefreshActionPerformed

    private void buttonbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonbackActionPerformed
        upperConatiner.remove(this);
        CardLayout layout = (CardLayout) upperConatiner.getLayout();
        layout.previous(upperConatiner);
    }//GEN-LAST:event_buttonbackActionPerformed

    private void buttonAssignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAssignActionPerformed
        int selectedRow = workreqTble.getSelectedRow();
        if (selectedRow < 0){
            return;
        }
        Transportation_WorkRequest request = (Transportation_WorkRequest)workreqTble.getValueAt(selectedRow, 0);
        request.setReceiver(acc);
        request.setStatus("Assigned");
    }//GEN-LAST:event_buttonAssignActionPerformed

    private void buttonRefresh1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRefresh1ActionPerformed
        // TODO add your handling code here:
          // TODO add your handling code here:
         int selectedRow = workreqTble.getSelectedRow();
    if (selectedRow < 0) {
        return;
    }
    Transportation_WorkRequest request = (Transportation_WorkRequest) workreqTble.getValueAt(selectedRow, 0);

    // Remove the request from the organization's work request list
    org.getWQ().getWorkRequestList().remove(request);

    // Remove the row from the table
    DefaultTableModel model = (DefaultTableModel) workreqTble.getModel();
    model.removeRow(selectedRow);

    // Remove the request from the DB4O file
    removeRequestFromDB4O(request);
}

private void removeRequestFromDB4O(Transportation_WorkRequest request) {
    ObjectContainer conn = DB4OUtil.getInstance().createConnection();
    try {
        // Retrieve the existing Transportation_WorkRequest objects stored in the DB4O file
        ObjectSet<Transportation_WorkRequest> requests = conn.query(Transportation_WorkRequest.class);

        // Remove the selected Transportation_WorkRequest from the retrieved list
        requests.remove(request);

        // Store the updated list back into the DB4O file
        for (Transportation_WorkRequest updatedRequest : requests) {
            conn.store(updatedRequest);
        }

        conn.commit();
    } finally {
        DB4OUtil.shutdown(conn);
    }
    }//GEN-LAST:event_buttonRefresh1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAssign;
    private javax.swing.JButton buttonRefresh;
    private javax.swing.JButton buttonRefresh1;
    private javax.swing.JButton buttonback;
    private javax.swing.JButton buttonprocessreq;
    private javax.swing.JScrollPane jpanelscroll1;
    private javax.swing.JLabel mainlabel1;
    private javax.swing.JTable workreqTble;
    // End of variables declaration//GEN-END:variables

    public void populateTable() {
       // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
      DefaultTableModel model = (DefaultTableModel) workreqTble.getModel();
    model.setRowCount(0);
    Set<Object> addedRequests = new HashSet<>();

    for (Work_Request request : org.getWQ().getWorkRequestList()) {
        if (!addedRequests.contains(request) && request instanceof Transportation_WorkRequest) {
            Transportation_WorkRequest transRequest = (Transportation_WorkRequest) request;
            Object[] row = new Object[6]; // Adjust the number of columns as needed
            row[0] = transRequest; // Store the entire object
            row[1] = request.getSender().getEmp().getEName(); // Hospital Name
            row[2] = request.getStatus();
            row[3] = ((Transportation_WorkRequest) request).getEquipmentinfo();
            row[4] = ((Transportation_WorkRequest) request).getUrgency();
            row[5] = request.getRequestDate();
            model.addRow(row);
            addedRequests.add(request);
        }
    }
    }
    
}
