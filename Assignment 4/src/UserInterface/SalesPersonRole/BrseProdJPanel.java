/*
 * BrseProdJPanel.java
 *
 * Created on October 10, 2008, 9:10 AM
 */
package UserInterface.SalesPersonRole;

import Business.BusinessClass;
import Business.CustomerClass;
import Business.MasterOrderCatalClass;
import Business.OrderClass;
import Business.OrderItemClass;
import Business.ProductClass;
import Business.SalesPersonClass;
import Business.SuppClass;
import Business.Utils.MyDbleVerifClass;
import Business.Utils.MyIntgrVerifClass;
import Business.Utils.MyStrngVerifClass;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author VAMSI VAS
 */
public class BrseProdJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private SuppClass xerox;
    private MasterOrderCatalClass masterOrderCatalog;
    private CustomerClass customer;
    private SalesPersonClass salesPerson;
    private OrderClass order;
    boolean isCheckedOut = false;

    /**
     * Creates new form BrowseProducts
     */
    public BrseProdJPanel(JPanel upc, BusinessClass business,SalesPersonClass salesPerson, CustomerClass customer) {
        initComponents();
        this.userProcessContainer = upc;
        this.xerox = business.getXeroxSupplier();
        this.masterOrderCatalog = business.getMasterOrderCatal();
        this.customer=customer;
        this.salesPerson=salesPerson;
        order= new OrderClass();
        salesPersonNameJLabel.setText(salesPerson.getSalesPersName());
        customerJLabel.setText(customer.getCustName());
        MyStrngVerifClass myStringVerifier= new MyStrngVerifClass();
        txtSearchKeyWord.setInputVerifier(myStringVerifier);
        MyDbleVerifClass myDoubleVerifier= new MyDbleVerifClass();
        txtSalesPrice.setInputVerifier(myDoubleVerifier);
        MyIntgrVerifClass myIntegerVerifier = new MyIntgrVerifClass();
        txtNewQuantity.setInputVerifier(myIntegerVerifier);
        populateProductTable();
    }

    private void populateProductTable() {
        DefaultTableModel dtm = (DefaultTableModel) productTable.getModel();
        SuppClass supplier = xerox;
        dtm.setRowCount(0);
        if (supplier != null) {
            for (ProductClass p : supplier.getProCatal().getProductcatalog()) {
                Object row[] = new Object[6];
                row[0] = p;
                row[1] = p.getModelNumb();
                row[2] = p.getFloorRate();
                row[3] = p.getRate();
                row[4] = p.getCeiligRate();
                row[5] = p.getAvail();
                dtm.addRow(row);
            }
        }
    }

    private void refreshProductTable(String keyWord) {
        DefaultTableModel model = (DefaultTableModel) productTable.getModel();
        model.setRowCount(0);

        for (ProductClass p : xerox.getProCatal().getProductcatalog()) {
            if (keyWord.equals(p.getProdName())) {
                Object row[] = new Object[6];
                row[0] = p;
                row[1] = p.getModelNumb();
                row[2] = p.getFloorRate();
                row[3] = p.getRate();
                row[4] = p.getCeiligRate();
                row[5] = p.getAvail();
                model.addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        viewProdjButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        addtoCartButton6 = new javax.swing.JButton();
        quantitySpinner = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        btnSearchProduct = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtSalesPrice = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();
        btnViewOrderItem = new javax.swing.JButton();
        btnModifyQuantity = new javax.swing.JButton();
        btnRemoveOrderItem = new javax.swing.JButton();
        btnCheckOut = new javax.swing.JButton();
        txtSearchKeyWord = new javax.swing.JTextField();
        txtNewQuantity = new javax.swing.JTextField();
        salesPersonNameJLabel = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        customerJLabel = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 255, 204));
        setPreferredSize(new java.awt.Dimension(750, 511));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        productTable.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Product Id", "Floor Price", "Target Price", "Ceiling Price", "Avail"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(productTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 200, 740, 100));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Sales Person");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, 110, 30));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Supplier Product Catalog");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, 240, -1));

        btnBack.setBackground(new java.awt.Color(255, 204, 204));
        btnBack.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 12)); // NOI18N
        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 590, 90, -1));

        viewProdjButton2.setBackground(new java.awt.Color(255, 204, 204));
        viewProdjButton2.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 12)); // NOI18N
        viewProdjButton2.setText("View Product Detail");
        viewProdjButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewProdjButton2ActionPerformed(evt);
            }
        });
        add(viewProdjButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 340, 160, -1));

        jLabel4.setBackground(new java.awt.Color(0, 0, 0));
        jLabel4.setFont(new java.awt.Font("Vijaya", 1, 48)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(204, 0, 0));
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/CustomerRole/bestbuy.gif"))); // NOI18N
        jLabel4.setText("Welcome To Xerox !");
        jLabel4.setIconTextGap(7);
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 10, -1, -1));

        addtoCartButton6.setBackground(new java.awt.Color(255, 204, 204));
        addtoCartButton6.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 12)); // NOI18N
        addtoCartButton6.setText("ADD TO CART");
        addtoCartButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addtoCartButton6ActionPerformed(evt);
            }
        });
        add(addtoCartButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 340, -1, -1));

        quantitySpinner.setModel(new javax.swing.SpinnerNumberModel());
        add(quantitySpinner, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 340, 40, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Quantity:");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 340, -1, -1));

        btnSearchProduct.setText("Search Product By Name");
        btnSearchProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchProductActionPerformed(evt);
            }
        });
        add(btnSearchProduct, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 170, -1, -1));

        jLabel6.setText("Sales Price");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 340, -1, -1));
        add(txtSalesPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 340, 40, -1));

        jLabel7.setText("Item in cart");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 380, -1, -1));

        orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Item Name", "Price", "Quantity", "Total Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(orderTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 410, 740, 110));

        btnViewOrderItem.setBackground(new java.awt.Color(255, 204, 204));
        btnViewOrderItem.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 12)); // NOI18N
        btnViewOrderItem.setText("View Item");
        btnViewOrderItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewOrderItemActionPerformed(evt);
            }
        });
        add(btnViewOrderItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 550, -1, -1));

        btnModifyQuantity.setBackground(new java.awt.Color(255, 204, 204));
        btnModifyQuantity.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 12)); // NOI18N
        btnModifyQuantity.setText("Modify Quantity");
        btnModifyQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyQuantityActionPerformed(evt);
            }
        });
        add(btnModifyQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 550, -1, -1));

        btnRemoveOrderItem.setBackground(new java.awt.Color(255, 204, 204));
        btnRemoveOrderItem.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 12)); // NOI18N
        btnRemoveOrderItem.setText("Remove");
        btnRemoveOrderItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveOrderItemActionPerformed(evt);
            }
        });
        add(btnRemoveOrderItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 550, -1, -1));

        btnCheckOut.setBackground(new java.awt.Color(255, 204, 204));
        btnCheckOut.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 12)); // NOI18N
        btnCheckOut.setText("Check out");
        btnCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckOutActionPerformed(evt);
            }
        });
        add(btnCheckOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 550, -1, -1));
        add(txtSearchKeyWord, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 170, 110, -1));
        add(txtNewQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 550, 70, -1));

        salesPersonNameJLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        salesPersonNameJLabel.setText("SalesPerson");
        add(salesPersonNameJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, 140, -1));

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel8.setText("Customer");
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 110, 110, 30));

        customerJLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        customerJLabel.setText("Customer");
        add(customerJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 140, 140, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        if (order.getOrderItemL().size() > 0) {
            ArrayList<OrderItemClass> orderList = order.getOrderItemL();
            for (OrderItemClass orderItem : orderList) {
                ProductClass p = orderItem.getProd();
                p.setAvail(orderItem.getQuant() + p.getAvail());
            }
            order.getOrderItemL().removeAll(orderList);
        }
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void viewProdjButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewProdjButton2ActionPerformed
        // TODO add your handling code here:
        int row = productTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "You didn't select any rows from the table!");
            return;
        }
        ProductClass p = (ProductClass) productTable.getValueAt(row, 0);
        ViewProdDetailJPanel vpdjp = new ViewProdDetailJPanel(userProcessContainer, p);
        userProcessContainer.add("ViewProductDetailJPanelCustomer", vpdjp);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_viewProdjButton2ActionPerformed

    private void addtoCartButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addtoCartButton6ActionPerformed
        // TODO add your handling code here:

        // TODO add your handling code here:
        int selectedRow = productTable.getSelectedRow();
        ProductClass selectedProduct;
        double salesPrice = 0;
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Select a row", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            selectedProduct = (ProductClass) productTable.getValueAt(selectedRow, 0);
        }

        try {
            salesPrice = Integer.parseInt(txtSalesPrice.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Enter valid sales price", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if(salesPrice< selectedProduct.getFloorRate())
        {
            JOptionPane.showMessageDialog(this, "Sales Price cannot be less than Floor Price.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(salesPrice> selectedProduct.getCeiligRate())
        {
            JOptionPane.showMessageDialog(this, "Sales Price cannot be Greater than Ceiling Price.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int fetchedQty = (Integer) quantitySpinner.getValue();
        if (fetchedQty <= 0) {
            JOptionPane.showMessageDialog(this, "Selected atlest 1 quantity", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (fetchedQty <= selectedProduct.getAvail()) {
            boolean alreadyPresent = false;
            for (OrderItemClass orderItem : order.getOrderItemL()) {
                if (orderItem.getProd() == selectedProduct) {
                    int oldAvail = selectedProduct.getAvail();
                    int newAvail = oldAvail - fetchedQty;
                    selectedProduct.setAvail(newAvail);
                    orderItem.setSalesPrice(salesPrice);
                    orderItem.setQuant(fetchedQty + orderItem.getQuant());
                    alreadyPresent = true;
                    refreshOrderTable();
                    populateProductTable();
                    break;
                }
            }

            if (!alreadyPresent) {
                int oldAvail = selectedProduct.getAvail();
                int newAvail = oldAvail - fetchedQty;
                selectedProduct.setAvail(newAvail);
                order.addOrderI(selectedProduct, fetchedQty, salesPrice);
                refreshOrderTable();
                populateProductTable();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Quantity > Availability!!", "Warning", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_addtoCartButton6ActionPerformed

    private void processCheckout(OrderClass order)
    {
        /*
        OrderClass
        1) Set commission
        2) OrderClass total
        3) CustomerClass
        4) SalesPersonClass
        5) OrderClass Date*/
        order.setCust(customer);
        order.setSalesP(salesPerson);
        double orderTotal=0.0;
        double orderCommission=0.0;
        for(OrderItemClass oi:order.getOrderItemL())
        {
            ProductClass p= oi.getProd();
            customer.setBuyCountNumber(customer.getBuyCountNumber()+oi.getQuant());
            p.setSoldCountNumber(p.getSoldCountNumber()+oi.getQuant());
            orderTotal+= oi.getQuant()*oi.getSalesPrice();
            orderCommission+=getCommission(oi);
        }
        order.setOrderT(orderTotal);
        order.setOrderD(new Date());
        /*updating SalesPersonClass totalCommission*/
        salesPerson.setTotalComm(salesPerson.getTotalComm()+orderCommission);
        JOptionPane.showMessageDialog(this, "Total Commission for this order is: "+orderCommission, "Information", JOptionPane.INFORMATION_MESSAGE);
        
    }
    private double getCommission(OrderItemClass o)
    {
        double commission=0.0;
        /*Above Target Price*/
        if(o.getSalesPrice()>=o.getProd().getRate() && o.getSalesPrice()<= o.getProd().getCeiligRate())
        {
            salesPerson.setAbvTrgt(salesPerson.getAbvTrgt()+o.getQuant());
            commission= (o.getSalesPrice()*salesPerson.getCeilComm())/100;
        }
        /*Below Target Price*/
        else if(o.getSalesPrice()<o.getProd().getRate() && o.getSalesPrice()>= o.getProd().getFloorRate())
        {
            salesPerson.setBlwTrgt(salesPerson.getBlwTrgt()+o.getQuant());
            commission= (o.getSalesPrice()*salesPerson.getFloorComm())/100;
        }
        commission= commission*o.getQuant();
        o.setSalesComm(commission);
        return commission;
    }
    private void btnCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckOutActionPerformed
        // TODO add your handling code here:
        if (order.getOrderItemL().size() > 0) {
            processCheckout(order);
            masterOrderCatalog.addOrder(order);
            isCheckedOut = true;
            JOptionPane.showMessageDialog(null, "Order added ssuccessfully!!");
            order = new OrderClass();
            refreshOrderTable();
            populateProductTable();
        } else {
            JOptionPane.showMessageDialog(null, "Order not added as there are no items!!");
        }
    }//GEN-LAST:event_btnCheckOutActionPerformed

    private void btnModifyQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyQuantityActionPerformed
        // TODO add your handling code here:
        int selectedRow = orderTable.getSelectedRow();
        //Product selectedProduct;
        //int salesPrice=0;
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Select a row", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (!txtNewQuantity.getText().isEmpty() && !txtNewQuantity.getText().equals("0")) {
            OrderItemClass orderItem = (OrderItemClass) orderTable.getValueAt(selectedRow, 0);
            int currentAvail = orderItem.getProd().getAvail();
            int oldQty = orderItem.getQuant();
            int newQty = Integer.parseInt(txtNewQuantity.getText());
            if (newQty > (currentAvail + oldQty)) {
                JOptionPane.showMessageDialog(null, "Quantity is more than the availability");
                //return;
            } else {
                if (newQty <= 0) {
                    JOptionPane.showMessageDialog(null, "Invalid qty");
                    return;
                }
                orderItem.setQuant(newQty);
                orderItem.getProd().setAvail(currentAvail + (oldQty - newQty));
                refreshOrderTable();
                populateProductTable();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Quantity cannot be zero!!");
        }
    }//GEN-LAST:event_btnModifyQuantityActionPerformed

    private void btnSearchProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchProductActionPerformed
        String keyWord = txtSearchKeyWord.getText();
        refreshProductTable(keyWord);
    }//GEN-LAST:event_btnSearchProductActionPerformed

    private void btnRemoveOrderItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveOrderItemActionPerformed
        int selectedRowCount = orderTable.getSelectedRowCount();
        if (selectedRowCount <= 0) {
            JOptionPane.showMessageDialog(null, "You didn't select any rows from the orderItem table!");
            return;
        }

        int row = orderTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Failed to retrive selected row");
            return;
        }

        OrderItemClass oi = (OrderItemClass) orderTable.getValueAt(row, 0);
        int oldQuantity = oi.getProd().getAvail();
        int orderQuantity = oi.getQuant();
        int newQuantity = oldQuantity + orderQuantity;
        oi.getProd().setAvail(newQuantity);
        order.removeOrderI(oi);
        JOptionPane.showMessageDialog(null, "The order item of " + orderQuantity + "of " + oi + " has been removed.");
        refreshOrderTable();
        populateProductTable();
    }//GEN-LAST:event_btnRemoveOrderItemActionPerformed

    private void btnViewOrderItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewOrderItemActionPerformed
        int row = orderTable.getSelectedRow();
if (row < 0) {
    JOptionPane.showMessageDialog(null, "Failed to retrieve the selected row");
    return;
}

int selectedRowCount = orderTable.getSelectedRowCount();
if (selectedRowCount <= 0) {
    JOptionPane.showMessageDialog(null, "You didn't select any rows from the orderItem table!");
    return;
}

OrderItemClass oi = (OrderItemClass) orderTable.getValueAt(row, 0);
ViewOrderDetailJPanel voidjp = new ViewOrderDetailJPanel(userProcessContainer, oi);
userProcessContainer.add("ViewOrderItemDetailJPanel", voidjp);
CardLayout layout = (CardLayout) userProcessContainer.getLayout();
layout.next(userProcessContainer);

    }//GEN-LAST:event_btnViewOrderItemActionPerformed

    //Method to refresh OrderClass table
    public void refreshOrderTable() {
        DefaultTableModel dtm =(DefaultTableModel) orderTable.getModel();
        dtm.setRowCount(0);
        
        for (OrderItemClass oi : order.getOrderItemL()) {
            Object row[] = new Object[4];
            row[0] = oi;
            row[1] = oi.getSalesPrice();
            row[2] = oi.getQuant();
            row[3] = oi.getSalesPrice() * oi.getQuant();
            ((DefaultTableModel) orderTable.getModel()).addRow(row);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addtoCartButton6;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCheckOut;
    private javax.swing.JButton btnModifyQuantity;
    private javax.swing.JButton btnRemoveOrderItem;
    private javax.swing.JButton btnSearchProduct;
    private javax.swing.JButton btnViewOrderItem;
    private javax.swing.JLabel customerJLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable orderTable;
    private javax.swing.JTable productTable;
    private javax.swing.JSpinner quantitySpinner;
    private javax.swing.JLabel salesPersonNameJLabel;
    private javax.swing.JTextField txtNewQuantity;
    private javax.swing.JTextField txtSalesPrice;
    private javax.swing.JTextField txtSearchKeyWord;
    private javax.swing.JButton viewProdjButton2;
    // End of variables declaration//GEN-END:variables
}
